import React, { useState } from 'react';

import styles from './Request.module.scss';

import adminImg from '../../../assets/images/user/admin-img.png';
import Input from '../../../ui-kit/input/Input';
import Button from '../../../ui-kit/button/Button';

const Request = ({ requestButtonRef }) => {
  const [values, setValues] = useState({
    name: '',
    email: '',
    phone: '',
    project: '',
  });
  const [isSending, setIsSending] = useState(false);
  const [success, setSuccess] = useState(false);
  const [error, setError] = useState('');

  const handleChange = (key, newValue) => {
    setValues((prev) => ({
      ...prev,
      [key]: newValue,
    }));
  };

  const isFormValid =
    values.name.trim() &&
    values.email.trim() &&
    values.phone.trim() &&
    values.project.trim();

  const handleSend = async () => {
    setIsSending(true);
    setError('');
    setSuccess(false);
    const TELEGRAM_BOT_TOKEN = '7824671826:AAG1Ev578oxKo0VzwH5z9WpweAmozlBLlFU';
    const TELEGRAM_CHAT_ID = '867980203';
    const message = `–ó–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞!%0A–ò–º—è: ${values.name || '-'}%0A–ü–æ—á—Ç–∞: ${values.email || '-'}%0A–¢–µ–ª–µ—Ñ–æ–Ω: ${values.phone || '-'}%0A–ü—Ä–æ–µ–∫—Ç: ${values.project || '-'}`;
    const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage?chat_id=${TELEGRAM_CHAT_ID}&text=${message}`;
    console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram:', url);
    try {
      const resp = await fetch(url);
      console.log('–û—Ç–≤–µ—Ç Telegram:', resp);
      if (resp.ok) {
        setSuccess(true);
        setValues({ name: '', email: '', phone: '', project: '' });
        console.log('–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!');
      } else {
        setError('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:', resp.status, resp.statusText);
      }
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ fetch:', err);
    }
    setIsSending(false);
  };

  return (
    <section className={styles.request}>
      <div className={styles.request__container}>
        <div className={styles.request__container_content}>
          <div className={styles.contact__invite}>
            <h2 className={styles.contact__invite_title}>
              –ü–æ—è–≤–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã
              <br />
              –∏–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ–±—Å—É–¥–∏—Ç—å
              <br />
              –ø—Ä–æ–µ–∫—Ç?
            </h2>
            <div className={styles.admin__info}>
              <div className={styles.admin__info_img_container}>
                <img src={adminImg} alt="" className={styles.admin__info_img} />
              </div>
              <div className={styles.admin__info_text_container}>
                <div className={styles.admin__info_text_container_content}>
                  <h4 className={styles.content__title}>–ü—Ä–∏–≤–µ—Ç, —è –≠–ª—å–≤–∏—Ä–∞ üëã</h4>
                  <p className={styles.content__subtitle}>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä Silent Automations.</p>
                  <p className={styles.content__text}>
                    –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç –∏–ª–∏ –∏–¥–µ—è ‚Äî –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É, –∏ —è –ø–æ–º–æ–≥—É
                    <br />
                    –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞.
                  </p>
                </div>
              </div>
            </div>
          </div>
          <div className={styles.request__form}>
            <div className={styles.request__form_primary}>
              <Input
                type="text"
                placeholder="–í–∞—à–µ –∏–º—è"
                name="name"
                className="primary"
                value={values.name}
                onChange={e => handleChange('name', e.target.value)}
              />
              <Input
                type="email"
                placeholder="–í–∞—à–∞ –ø–æ—á—Ç–∞"
                name="email"
                className="primary"
                value={values.email}
                onChange={e => handleChange('email', e.target.value)}
              />
              <Input
                type="tel"
                placeholder="–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
                name="phone"
                className="primary"
                value={values.phone}
                onChange={e => handleChange('phone', e.target.value)}
              />
            </div>
            <div className={styles.request__form_secondary}>
              <Input
                type="text"
                placeholder="–û–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ, –∫–∞–∫–æ–π –ø—Ä–æ–µ–∫—Ç –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç"
                name="project"
                className="secondary"
                value={values.project}
                onChange={e => handleChange('project', e.target.value)}
              />
              <Button
                className="primary_large"
                ref={requestButtonRef}
                type="button"
                onClick={handleSend}
                disabled={isSending}
              >
                {isSending ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É'}
              </Button>
              {success && <div style={{ color: 'green', marginTop: 8 }}>–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</div>}
              {error && <div style={{ color: 'red', marginTop: 8 }}>{error}</div>}
              <a href="/" className={styles.request__form_text}>
                –û—Ç–ø—Ä–∞–≤–ª—è—è –∑–∞—è–≤–∫—É, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å –Ω–∞{' '}
                <span className={styles.text_highlight}>–æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</span>
              </a>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

export default Request;
